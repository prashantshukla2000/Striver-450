//Problem-1
Given a number N. Count the number of digits in N which evenly divides N.
Input:
N = 12
Output:
2
Explanation:
1, 2 both divide 12 evenly

Code->
class Solution{
    static int evenlyDivides(int n){
        int count=0,m=n;
        while(n>0){
            int rem=n%10;
            if(rem!=0 && m%rem==0 ){
            count++;}
            n=n/10;
        }
        return count;
    }
}


Problem-2
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside 
the signed 32-bit integer range [-231, 231 - 1], then return 0.
Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

Input: x = 123
Output: 321

Example 2:
Input: x = -123
Output: -321

Example 3:
Input: x = 120
Output: 21

Code->
class Solution {
    public int reverse(int x) {
      int res=0;
        while(x!=0){
           int d=x%10;
            x=x/10;
            if(res>Integer.MAX_VALUE/10||(res==Integer.MAX_VALUE && d>=Integer.MAX_VALUE%10)){
                return 0;
            }
             if(res<Integer.MIN_VALUE/10||(res==Integer.MIN_VALUE && d<=Integer.MIN_VALUE%10)){
                return 0;
            }
            res=res*10+d;
        }
        return res;      
    }
}


Problem-3
Given an integer x, return true if x is a palindrome, and false otherwise.

Example 1:
Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.

Example 2:
Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome

Code->
class Solution {
    public boolean isPalindrome(int x) {
     int save=x,res=0;
        if(x<0)
            return false;
        while(x!=0){
            int rem=x%10;
            res=res*10+rem;
            x=x/10;
        }
        if(res==save)
            return true;
        else 
            return false;
    }
}


Problem-4
Given two numbers A and B. The task is to find out their LCM and GCD.

Example 1:
Input:
A = 5 , B = 10
Output:
10 5
Explanation:
LCM of 5 and 10 is 10, while
thier GCD is 5.

Code->
class Solution {
    static Long[] lcmAndGcd(Long A , Long B) {
      Long[] ans=new Long[2];
      Long hcf=  hcf(A,B);
        Long lcm=(A*B)/hcf;
        ans[0]=lcm;
        ans[1]=hcf;
        return ans;
    }
    public static Long hcf(Long a,Long b){
        if(a==0)
        return b;
        if(b==0)
        return a;
        return hcf(b,a%b);
    }
}


Problem-5
For a given 3 digit number, find whether it is armstrong number or not. An Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. Return "Yes" if it is a armstrong number else return "No".
NOTE: 371 is an Armstrong number since 33 + 73 + 13 = 371

Example 1:
Input: N = 153
Output: "Yes"
Explanation: 153 is an Armstrong number
since 13 + 53 + 33 = 153.
Hence answer is "Yes".

Code->
class Solution {
    static String armstrongNumber(int n){
        // code here
        int save=n,res=0;
        while(n!=0){
            int rem=n%10;
            res=res+rem*rem*rem;
            n=n/10;
        }
        if(res==save)
        return "Yes";
        return "No";
    }
}


Problem-6
Sum of all divisors from 1 to n
Given a positive integer N., The task is to find the value of   
\sum_{i=1}^{i=n} F(i)  where function F(i) for the number i be defined as the sum of all divisors of ‘i‘.

Input:
N = 4
Output:
15
Explanation:
F(1) = 1
F(2) = 1 + 2 = 3
F(3) = 1 + 3 = 4
F(4) = 1 + 2 + 4 = 7
ans = F(1) + F(2) + F(3) + F(4)
    = 1 + 3 + 4 + 7
    = 15
    
Code->
class Solution{
    static long sumOfDivisors(int n){
   long sum = 0;
    for (long i = 1; i <= n; ++i)
        sum += (n / i) * i;
    return sum;
    }
}
Explanation---it can easily be observed that number i is occurring only in their multiples less than or equal to n.
Thus, we just need to find the count of multiples and then multiply it with i for full contribution in the final sum.
It can easily be done in O(1) time by taking the floor of (n / i) and then multiply it with i for the sum. 
Let n = 6,
=> F(1) + F(2) + F(3) + F(4) + F(5) + F(6)
=> 1 will occurs 6 times in F(1), F(2),
   F(3), F(4), F(5) and F(6)
=> 2 will occurs 3 times in F(2), F(4) and
   F(6)
=> 3 will occur 2 times in F(3) and F(6)
=> 4 will occur 1 times in F(4)
=> 5 will occur 1 times in F(5)
=> 6 will occur 1 times in F(6)
Time-o(N),space0(1)



Problem-7
Minimum number of jumps
Given an array of N integers arr[] where each element represents the max length of the jump that can be made forward from that element.
Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.

Note: Return -1 if you can't reach the end of the array.

Example 1:
Input:
N = 11 
arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} 
Output: 3 
Explanation: 
First jump from 1st element to 2nd 
element with value 3. Now, from here 
we jump to 5th element with value 9, 
and from here we will jump to the last.

Code->

class Solution{
    static int minJumps(int[] arr){
    int n=arr.length;
           if(arr[0] == 0 && n>1) return -1;// agar pahale hi point pr zero pada ho to bhaiya kaha jaoge. Ruk jao
         if(n == 1) return 0;

     // assume kro ki pahale point se apan jump lga diye hai
    int jump=1;
    int ladder=arr[0];
    int stairs=arr[0];
        for(int i=1;i<arr.length;i++)
    {
        if(i==arr.length-1)
        return jump;
        
        // Ab ham agle point par aagye to maxReach nikalo aur store kralo
        if(i+arr[i]>ladder){
            ladder=i+arr[i];
        }
        
    stairs--;// Ab ham agle point pr aagye hai to ek step kam kardo
    if(stairs==0){// check kro ki steps khatm to nhi ho gye
          if(i>=ladder) return -1; // agar end point tak pahuchne se pahale koi -
          //--zero mil gya aur usse pahale koi ladder nhi tha
        jump++;  // steps khatm hue matlab new point par aagye yha se bhi jump- 
        //--lga do apan jump tabhi lagayenge jab steps khatm ho jayenge
        stairs=ladder-i;// steps ko update krlo
    }
    }
    return -1;
    }
}

Simillar LeetCode Approach for Jump game-2->
class Solution {
    public int jump(int[] nums) {
        int res=0;
        int l=0,r=0;//intially we have only the frst elemeent in our indow
        while(r<nums.length-1){
            int farthest=0;//finding what is the max distance we can jump
            for(int i=l;i<=r;i++){
               farthest= Math.max(farthest,i+nums[i]);
            }
            l=r+1;
            r=farthest;
            res++;
        }
        return res;
    }
}
