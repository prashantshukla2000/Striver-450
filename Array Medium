//Problem 1
1. Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
 
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Code->
class Solution {
    public int[] twoSum(int[] nums, int target) {
     HashMap<Integer,Integer> hm=new HashMap<>();   
    int ans[]=new int[2];
    for(int i=0;i<nums.length;i++){
      if(hm.containsKey(target-nums[i])){
          ans[0]=hm.get(target-nums[i]);
          ans[1]=i;
          break;
      }
        hm.put(nums[i],i);
        
    }
    return ans;
    }
}


//Problem-2

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, 
with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Code->
class Solution {
    public void sortColors(int[] nums) {
        //low is 0
        //high points to 2
        //mid points to current item
       int low=0,mid=0,high=nums.length-1;
       while(mid<=high){
           if(nums[mid]==2){
               int temp=nums[high];
               nums[high]=nums[mid];
               nums[mid]=temp;
               high--;
           }else if(nums[mid]==0){
               int temp=nums[mid];
               nums[mid]=nums[low];
               nums[low]=temp;
               low++;
               mid++;

           }else
            mid++;
       } 
    }
}

//Problem-3
169. Majority Element
Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Code->
class Solution {
    public int majorityElement(int[] nums) {
     HashMap<Integer,Integer> hm=new HashMap<>();
     for(int num:nums){
         hm.put(num,hm.getOrDefault(num,0)+1);
     }
     int max=0,key=0;
     for(Map.Entry<Integer,Integer> entry :hm.entrySet()){
      if(entry.getValue()>max){
          max=entry.getValue();
          key=entry.getKey();
      }
     }
     return key;
    }
}

OR Method-2
//Moore Voting Alghorithm.....
//Here, can say that count of minority elements and majority elements are equal up to a certain  
//point of time in the array. So when we traverse through the array we try to keep track of the  
//count of elements and which element we are tracking. Since the majority element appears more 
//than N/2 times, we can say that at some point in array traversal we find the majority element. 

class Solution {
    public int majorityElement(int[] nums) {
    int count=0,ele=0;
    for(int num:nums){
        if(count==0)
        {ele=num;
        }
        if(num==ele){
            count+=1;
        }else{
            count-=1;
        }
    }   
     return ele;
    }
}


//Problem-4
Maximum Subarray/Kadane Algo
Given an integer array nums, find the subarray  which has the largest sum and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Code->
class Solution {
    public int maxSubArray(int[] nums) {
        int sum=0,msum=nums[0];
        for(int num:nums){
            sum=sum+num;
            msum=Math.max(sum,msum);
            if(sum<=0)
            {sum=0;
            }
        }
        return msum;
    }
}


//Problem-5
Max sum in sub-arrays
Given an array, find maximum sum of smallest and second smallest elements chosen from all possible sub-arrays. 
More formally, if we write all (nC2) sub-arrays of array of size >=2 and find the sum of smallest and second smallest, 
then our answer will be maximum sum among them. 

Example 1:
Input : arr[] = [4, 3, 1, 5, 6]
Output : 11
Subarrays with smallest and second smallest are, [4, 3]  

Code->
class Solution {
    
    public static long pairWithMaxSum(long arr[], long n)
    {long sum=0;
        for(int i=0;i<n-1;i++){
        sum=Math.max(sum,arr[i]+arr[i+1]);
    }
    return sum;
    }
}


//Problem-6
121. Best Time to Buy and Sell Stock
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Code->
class Solution {
    public int maxProfit(int[] prices) {
        int msum=0,min=Integer.MAX_VALUE;

     for(int i=0;i<prices.length;i++){
     min=Math.min(prices[i],min);
     msum=Math.max(msum,prices[i]-min);
     }  
     return msum; 
    }
}


//Problem-7
2149. Rearrange Array Elements by Sign
You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.
You should rearrange the elements of nums such that the modified array follows the given conditions:
Every consecutive pair of integers have opposite signs.
For all integers with the same sign, the order in which they were present in nums is preserved.
The rearranged array begins with a positive integer.
Return the modified array after rearranging the elements to satisfy the aforementioned conditions.

Example 1:
Input: nums = [3,1,-2,-5,2,-4]
Output: [3,-2,1,-5,2,-4]
Explanation:
The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].
The only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].
Other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.  

Code->
class Solution {
    public int[] rearrangeArray(int[] nums) {
    int arr[]=new int[nums.length];
    int pos=0,neg=1;
    for(int i=0;i<nums.length;i++){
     if(nums[i]>0){
         arr[pos]=nums[i];pos+=2;
     }else if(nums[i]<0){
         arr[neg]=nums[i];neg+=2;
     }
    }
    return arr;
}
}



//Problem-8
31. Next Permutation
A permutation of an array of integers is an arrangement of its members into a sequence or linear order.
For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer.
More formally, if all the permutations of the array are sorted in one container according to their lexicographical order,
then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible,
the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.
The replacement must be in place and use only constant extra memory.

Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]

Code->
class Solution {
    public void nextPermutation(int[] nums) {
  int i=nums.length-2,j=nums.length-1;
  while(i>=0 && nums[i]>=nums[i+1])i--;
  if(i>=0){
      while(j>=0 && nums[j]<=nums[i])j--;
      swap(nums,i,j);
  }
  reverse(nums,i+1,nums.length-1);
    }
    public void swap(int []arr, int i, int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
    public void reverse(int []arr, int i ,int j){
        while(i<j){
            swap(arr,i,j);
            i++;
            j--;
        }
    }
}



//Problem-9
Leaders in an array
Given an array A of positive integers. Your task is to find the leaders in the array. An element of array is leader if it is greater than or equal 
to all the elements to its right side. The rightmost element is always a leader. 

Example 1:
Input:
n = 6
A[] = {16,17,4,3,5,2}
Output: 17 5 2
Explanation: The first leader is 17  as it is greater than all the elements to its right.  Similarly, the next  leader is 5. The right most element 
is always a leader so it is also  included.

Code->
class Solution{
    //Function to find the leaders in the array.
    static ArrayList<Integer> leaders(int arr[], int n){
        // Your code here
        ArrayList<Integer> al=new ArrayList<>();
        al.add(arr[n-1]);
        int max=arr[n-1];
        for(int i=n-2;i>=0;i--){
            if(arr[i]>=max){
                max=arr[i];
                al.add(arr[i]);
            }
        }
        Collections.reverse(al);
        return al;
    }
}


//Problem-10

128. Longest Consecutive Sequence
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence
You must write an algorithm that runs in O(n) time.

Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

//Code->
class Solution {
    public int longestConsecutive(int[] nums) {
Set<Integer> set=new HashSet<>();
int maxlen=0;
for(int i=0;i<nums.length;i++){
    set.add(nums[i]);
}
for(int i=0;i<nums.length;i++){
    if(!set.contains(nums[i]-1)){
    int length=0;
    while(set.contains(nums[i]+length)){
        length=length+1;
        maxlen=Math.max(length,maxlen);
    }
    }
}
return maxlen; 
   }
}


//Problem-11

73. Set Matrix Zeroes
Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
You must do it in place.

Example 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Code->
class Solution {
    public void setZeroes(int[][] matrix) {
        int r=matrix.length,c=matrix[0].length;
        boolean row=false,col=false;
        for(int j=0;j<c;j++){
            if(matrix[0][j]==0){
                row=true;
                break;
            }
        }
        for(int i=0;i<r;i++){
             if(matrix[i][0]==0){
                col=true;
                break;
            }
        }
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(matrix[i][j]==0){
                    matrix[i][0]=0;
                    matrix[0][j]=0;
                }
            }
        }
        for(int i=1;i<r;i++){
            if(matrix[i][0]==0){
                for(int j=1;j<c;j++){
                    matrix[i][j]=0;
                }
            }
        }
        for(int j=1;j<c;j++){
            if(matrix[0][j]==0){
                for(int i=1;i<r;i++)
                    {
                        matrix[i][j]=0;
                        }
                }
        }
        if(row==true){
            for(int j=0;j<c;j++){
                matrix[0][j]=0;
            }
        }
               if(col==true){
            for(int i=0;i<r;i++){
                matrix[i][0]=0;
            }
        }

    }
}


//Problem-12
48. Rotate Image
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]


Code->
class Solution {
    public void rotate(int[][] matrix) {
        int n=matrix.length,m=matrix[0].length;
   for(int i=0;i<n;i++){
       int p=m-1;
       for(int j=0;j<m/2;j++){
           int temp=matrix[i][p];
           matrix[i][p]=matrix[i][j];
           matrix[i][j]=temp;
           p--;
       }
   }
   for(int i=0;i<n;i++){
       for(int j=0;j<m-i;j++){
           int temp=matrix[i][j];
           matrix[i][j]=matrix[m-j-1][n-i-1];
           matrix[m-j-1][n-i-1]=temp;
       }
   }
    }
}


//Problem-13
54. Spiral Matrix
Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Code->
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int top=0,bot=matrix.length;
        int left=0,right=matrix[0].length;
        List<Integer> al=new ArrayList<Integer>();
           while(top<bot &&left<right){
               for(int i=left;i<right;i++){
                   al.add(matrix[top][i]);
               }
               top=top+1;
               for(int i=top;i<bot;i++){
                   al.add(matrix[i][right-1]);
               }
               right=right-1;
               if(!(top<bot&& left<right)){
                   break;
               }
               for(int i=right-1;i>=left;i-- ){
                   al.add(matrix[bot-1][i]);
               }
               bot=bot-1;
               for(int i=bot-1;i>=top;i--){
                   al.add(matrix[i][left]);
               }
               left=left+1;
           }
           return al;
    }
}
