//Probleem 1->
Print numbers from 1 to N without the help of loops.

Example 1:
Input:
N = 10
Output: 1 2 3 4 5 6 7 8 9 10

Code->
class Solution
{
  public void printNos(int N)
    {
       if(N==0){
           return;
       }else
       {
       printNos(N-1);
      System.out.print(N+" ");
       }
    }
}


//Problem-2
Print GFG n times without the loop.

Example:
Input:
5
Output:
GFG GFG GFG GFG GFG

Code->
class Solution {
    void printGfg(int N) {
        if(N==0)
        return;
        else{
            System.out.print("GFG ");
            printGfg(N-1);
        }
    }
}


//Problem 3->
Print numbers from N to 1 (space separated) without the help of loops.

Example 1:
Input:
N = 10
Output: 10 9 8 7 6 5 4 3 2 1


Code->
class Solution {
    void printNos(int N) {
        if(N==0)
        return;
        else{
            System.out.print(N+" ");
            printNos(N-1);

        }
    }
}

//Problem-4->
Given and integer N.Calculate the sum of series 13 + 23 + 33 + 43 + â€¦ till N-th term.

Example 1:
Input:
N=5
Output:
225
Explanation:
13+23+33+43+53=225

Code->
//Parametrised way-->
class Solution {
    long sumOfSeries(long N) {
        return f(N,0);
    }
    long f(long i, long sum){
        if(i<1)
        return sum;
    return f(i-1,sum+i*i*i);
    }
}

OR

//functional way-->
class Solution {
    long sumOfSeries(long N) {
        if(N==0)
        return 0;
        else{
        return N*N*N+sumOfSeries(N-1);
        }
    }
}

//Problem-5->
Find all factorial numbers less than or equal to N
A number N is called a factorial number if it is the factorial of a positive integer. For example, the first few factorial numbers are 1, 2, 6, 24, 120,
Given a number N, the task is to return the list/vector of the factorial numbers smaller than or equal to N.

Example-
Input: N = 6
Output: 1 2 6
Explanation: The first three factorial numbers are less than equal to N but 
the fourth factorial number 24 is  greater than N. So we print only first three factorials .

Code->
class Solution{
    static ArrayList<Long> list=new ArrayList<Long>();
    static ArrayList<Long> factorialNumbers(long N){
      return namer(1, N);
    }
    
    public static ArrayList<Long> namer(long i,long n) {
  if(fact(i)<=n){
      list.add(fact(i));
     return namer(i+1,n); 
     }
     else
     return list; 
    }
    
    public static  long fact(long n){
        if(n <= 1){
            return 1;
        }
        return n * fact(n-1);
    }
}


//Problem 6->
Given an array A of size N, print the reverse of it.

Example:

Input:
1
4
1 2 3 4
Output:
4 3 2 1

Code->
class GFG {
public static void main (String[] args) {
 Scanner sc = new Scanner(System.in);
 int t=sc.nextInt();
   while(t>=1) { 
       int n=sc.nextInt();
       int [] a = new int [n];
      for(int j=0;j<=n-1;j++){
      a[j]=sc.nextInt();
      }	
      rev(a,0,n-1);
      printarr(a,n);
      t--;
}
}

//instead of two variable s,e we could have also used only one varable i...as i element had to swapped to be n-i-1;
//..and as the i inc..n-i-1 decreases..so it would have work
static void rev(int a[],int s,int e){
    if(s>=e)
    return;
   int temp=a[s];
    a[s]=a[e];
    a[e]=temp;
    rev(a,s+1,e-1);  
}

static void printarr(int a[],int n){
    for(int i=0;i<n;i++){
        System.out.print(a[i]+" ");
    }
    System.out.println();
}
}


//Problem -7 ->
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, 
it reads the same forward and backward. Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

Code->
class Solution {
    public boolean isPalindrome(String s) {
        String stripped = s.toLowerCase().replaceAll("[^a-z\\d]", ""); //replace charcters other than a-z to "".
        if(stripped.length()==0||stripped.length()==1)
            return true;
        return isPalindromeR(stripped,0,stripped.length()-1);
    }
    
    public boolean isPalindromeR(String str,int s, int e) {
        if(s>=e)
            return true;
        if (str.charAt(s)!=str.charAt(e)) return false;
        return isPalindromeR(str,s+1,e-1);
    }
}

//Problem-8
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum
of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n). 

Example 1:
Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

Code->
class Solution {
    public int fib(int n) {
        if(n==0)
            return 0;
        else if(n==1)
            return 1;
        else return fib(n-1)+fib(n-2);
    }
}
